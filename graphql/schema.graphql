type Query {
    _empty: String
}

type Mutation {
    register(name: String!, email: String!, password: String!): UserResponse
        @field(resolver: "App\\GraphQL\\Mutations\\CreateUserMutation")
    login(email: String!, password: String!): UserResponse
        @field(resolver: "App\\GraphQL\\Mutations\\AuthLoginMutation")
    logout: Boolean
        @field(resolver: "App\\GraphQL\\Mutations\\AuthLogoutMutation")
    createTask(title: String!, description: String!): TaskResponse
        @field(resolver: "App\\GraphQL\\Mutations\\CreateTaskMutation")
    updateTask(
        id: ID!
        title: String
        description: String
        status: String
    ): TaskResponse
        @field(resolver: "App\\GraphQL\\Mutations\\UpdateTaskMutation")
}

type UserResponse {
    success: Boolean!
    message: String!
    user: User
}

type TaskResponse {
    success: Boolean!
    message: String!
    task: Task
}

type User {
    id: ID!
    name: String!
    email: String!
}

type Task {
    id: ID!
    title: String!
    description: String!
    status: String!
    user_id: ID!
    user: User!
}
